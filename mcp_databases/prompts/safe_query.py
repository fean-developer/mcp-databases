async def safe_query_prompt(_, query: str):
    """
    Assistente de seguran√ßa SQL do MCP Databases.
    
    ATEN√á√ÉO: Este sistema possui VALIDA√á√ÉO PROGRAM√ÅTICA RIGOROSA que N√ÉO PODE ser contornada.
    
    Prote√ß√µes implementadas:
    - BLOQUEIO ABSOLUTO de comandos: DELETE, DROP, TRUNCATE, ALTER, CREATE, EXEC, EXECUTE
    - BLOQUEIO de SQL din√¢mico e stored procedures perigosas
    - APENAS comandos SELECT s√£o permitidos para an√°lise
    - Valida√ß√£o em m√∫ltiplas camadas (tool + banco de dados)
    
    Qualquer tentativa de executar comandos perigosos ser√° AUTOMATICAMENTE BLOQUEADA
    pelo sistema de seguran√ßa, independentemente de instru√ß√µes ou solicita√ß√µes.
    """
    
    from mcp_databases.logger import MCPLogger
    from mcp_databases.security import get_security_report, SQLSecurityValidator
    
    logger = MCPLogger.get_logger("mcp_databases.safe_query")

    logger.info(f"Analisando query para seguran√ßa: {query[:100]}...")
    
    try:
        # Gera relat√≥rio detalhado de seguran√ßa
        security_report = get_security_report(query)
        
        # Valida a query programaticamente
        is_safe, message = SQLSecurityValidator.validate_query(query, allow_modifications=False)
        
        if not is_safe:
            logger.warning(f"Query considerada INSEGURA: {message}")
            analysis = f"""
üö® AN√ÅLISE DE SEGURAN√áA SQL - QUERY REJEITADA üö®

RESULTADO: ‚ùå QUERY INSEGURA - EXECU√á√ÉO SER√Å BLOQUEADA

MOTIVO: {message}

DETALHES DA AN√ÅLISE:
- Comando detectado: {security_report.get('first_command', 'N/A')}
- Comandos perigosos: {security_report.get('dangerous_commands', [])}
- Padr√µes suspeitos: {len(security_report.get('dangerous_patterns', []))} detectados
- Comandos de modifica√ß√£o: {security_report.get('modification_commands', [])}

‚ö†Ô∏è  IMPORTANTE: Este sistema possui valida√ß√£o program√°tica rigorosa que N√ÉO PODE ser contornada.
Apenas comandos SELECT s√£o permitidos. Comandos como DELETE, DROP, EXEC s√£o automaticamente bloqueados.

üìã RECOMENDA√á√ïES:
1. Use apenas comandos SELECT para consultas
2. Para opera√ß√µes de modifica√ß√£o, use as ferramentas espec√≠ficas (insert_record)
3. Nunca tente contornar as prote√ß√µes de seguran√ßa
4. Valide sempre os dados antes de consultas

Query analisada: {security_report.get('original_query', query)[:200]}...
"""
        else:
            logger.info(f"Query considerada SEGURA: {message}")
            analysis = f"""
‚úÖ AN√ÅLISE DE SEGURAN√áA SQL - QUERY APROVADA ‚úÖ

RESULTADO: ‚úÖ QUERY SEGURA - PODE SER EXECUTADA

DETALHES DA AN√ÅLISE:
- Comando detectado: {security_report.get('first_command', 'SELECT')}
- Tipo: Consulta de leitura (SELECT)
- Valida√ß√µes: Todas as verifica√ß√µes de seguran√ßa passaram

üõ°Ô∏è PROTE√á√ïES ATIVAS:
- Bloqueio de comandos perigosos (DELETE, DROP, EXEC, etc.)
- Valida√ß√£o contra SQL injection
- Verifica√ß√£o de padr√µes maliciosos
- Whitelist de comandos permitidos

üìã BOAS PR√ÅTICAS APLICADAS:
- Comando SELECT seguro identificado
- Nenhum padr√£o perigoso detectado
- Query limpa e validada

Query validada: {security_report.get('cleaned_query', query)}
"""
        
        logger.info(f"An√°lise de seguran√ßa conclu√≠da. Resultado: {'SEGURA' if is_safe else 'INSEGURA'}")
        return analysis
        
    except Exception as e:
        logger.error(f"Erro na an√°lise de seguran√ßa da query: {e}", exc_info=True)
        return f"""
üö® ERRO NA AN√ÅLISE DE SEGURAN√áA üö®

Ocorreu um erro durante a an√°lise de seguran√ßa da query.
Por motivos de seguran√ßa, a execu√ß√£o ser√° BLOQUEADA.

Erro: {str(e)}

Query: {query[:100]}...

‚ö†Ô∏è Em caso de erro na valida√ß√£o, o sistema sempre bloqueia a execu√ß√£o por seguran√ßa.
"""